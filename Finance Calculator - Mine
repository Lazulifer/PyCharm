"""
HW
1. Edit the script so that users can also enter their expenses so they
can see how much they have left over each month
2. Recreate the user input section to safely handle users inserting the wrong tye without
crashing the program
"""

def calculate_finances(monthly_income: float, tax_rate: float, currency: str, groceries: float, gas: float) -> None:

    monthly_tax: float = monthly_income * (tax_rate / 100)
    monthly_net_income: float = monthly_income - monthly_tax
    expenses: float = groceries + gas
    net_remaining_month: float = monthly_net_income - expenses

    yearly_tax: float = monthly_tax * 12
    yearly_salary: float = monthly_income * 12
    yearly_net_income: float = yearly_salary - yearly_tax


    print('----------------')

    print(f"Monthly Income: {currency}{monthly_income:,.2f}")
    print(f"Tax Rate: {tax_rate:,.0f}%")
    print(f"Monthly Tax: {monthly_tax:,.2f}")
    print(f"Monthly Net Income: {currency}{monthly_net_income:,.2f}")
    print(f"Groceries: {currency}{groceries:,.2f}")
    print(f"Gas: {currency}{gas:,.2f}")
    print(f"Disposable Income: {currency}{net_remaining_month:,.2f}")
    print(f"Yearly Salary: {currency}{yearly_salary:,.2f}")
    print(f"Yearly Tax Paid: {currency}{yearly_tax:,.2f}")
    print(f"Yearly Net Income: {currency}{yearly_net_income:,.2f}")

    print('----------------')

    # The f string serves as formatting. I don't need to change the type of my variables
    # for them to show up. Put brackets around them first.
    # In f formatting, the comma serves as a thousand separator
    # The decimal lets me format how many decimal places I want to show in my float
    # And the 2f specifies that amount.


def main() -> None: #Our user entry point

    currency = "$"

    # Asks for user input, checks if input is a float, raises an error if not
    # Raising returns None, so it doesn't need to be specified in the function declaration
    monthly_income: float = float(input("Enter your monthly salary: "))
    if monthly_income != float(monthly_income):
        raise ValueError #or use runtimeError

    # Asks for user input, checks if input is a float, raises an error if not
    tax_rate: float = float(input("Enter your tax rate (%): "))
    if tax_rate != float(tax_rate):
        raise ValueError

    groceries: float = float(input("Enter your groceries: "))
    if groceries != float(groceries):
        raise ValueError

    gas: float = float(input("Enter your gas price: "))
    if gas != float(gas):
        raise ValueError

    calculate_finances(monthly_income, tax_rate, currency, groceries, gas)

if __name__ == "__main__":
    main()

"""
HW
1. Edit the script so that users can also enter their expenses so they
can see how much they have left over each month
- I chose to include groceries and gas
2. Recreate the user input section to safely handle users inserting the wrong tye without
crashing the program
"""